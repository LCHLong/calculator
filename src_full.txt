===== src/logic/CalculatorEngine.js =====
/* ======================================================
   CalculatorEngine.js
   Ch·ª©a c√°c h√†m logic cho m√°y t√≠nh chu·∫©n to√°n h·ªçc (BODMAS)
   ====================================================== */

const MAX_DECIMALS = 10;

/* --------- ƒê·ªãnh d·∫°ng s·ªë ƒë·ªÉ hi·ªÉn th·ªã --------- */
export function formatNumberForDisplay(value) {
    if (["Error", "Cannot divide by zero", "Overflow"].includes(value)) return value;
    const n = Number(value);
    if (!isFinite(n)) return "Overflow";
    const hasFraction = Math.round(n) !== n;
    if (!hasFraction) return new Intl.NumberFormat("en-US").format(n);
    const fixed = Number(n.toFixed(MAX_DECIMALS));
    const parts = fixed.toString().split(".");
    if (parts.length === 1) return new Intl.NumberFormat("en-US").format(fixed);
    return `${new Intl.NumberFormat("en-US").format(Number(parts[0]))}.${parts[1].replace(/0+$/, "")}`;
}

/* --------- ƒê√°nh gi√° bi·ªÉu th·ª©c theo chu·∫©n to√°n h·ªçc (BODMAS) --------- */
export function evaluateExpression(expr) {
    try {
        // Th√™m replace cho d·∫•u tr·ª´ Unicode
        const sanitized = expr
            .replace(/√ó/g, "*")
            .replace(/√∑/g, "/")
            .replace(/‚àí/g, "-"); // <-- s·ª≠a ·ªü ƒë√¢y
        // eslint-disable-next-line no-eval
        const result = eval(sanitized);
        if (!isFinite(result)) return "Cannot divide by zero";
        return Number(result.toFixed(MAX_DECIMALS));
    } catch {
        return "Error";
    }
}

/* --------- To√°n t·ª≠ m·ªôt ng√¥i --------- */
export function applyUnary(op, val) {
    const n = Number(val);
    if (!isFinite(n)) return "Overflow";
    switch (op) {
        case "sqrt":
            if (n < 0) return "Error";
            return Math.sqrt(n);
        case "square":
            return n * n;
        case "inverse":
            if (n === 0) return "Cannot divide by zero";
            return 1 / n;
        default:
            return n;
    }
}

/* --------- T√≠nh ph·∫ßn trƒÉm --------- */
export function applyPercent(val) {
    const n = Number(val);
    return Number((n / 100).toFixed(MAX_DECIMALS));
}
===== src/index.css =====
===== src/styles/Keypad.css =====
.keypad {
    display: flex;
    flex-direction: column;
    gap: 8px;
}

.row {
    display: flex;
    gap: 8px;
}

.row:last-child button {
    height: 56px;
}===== src/styles/TopBar.css =====
.topbar {
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.topbar .left {
    display: flex;
    gap: 8px;
    align-items: center;
}

.hamburger {
    background: transparent;
    border: none;
    font-size: 18px;
    cursor: pointer;
}

.mode {
    font-weight: 600;
    font-size: 15px;
}===== src/styles/App.css =====
.calculator-root {
    min-height: 100vh;
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 32px;
    background: linear-gradient(180deg, #fafbfd 0%, #ffffff 100%);
}

.calculator {
    width: 340px;
    background: #ffffff;
    border-radius: 16px;
    box-shadow: 0 2px 12px rgba(0, 0, 0, 0.08);
    padding: 16px 18px 20px;
    display: flex;
    flex-direction: column;
    gap: 10px;
    border-bottom: 3px solid rgba(0, 0, 0, 0.05);
}

.footer-note {
    text-align: center;
    font-size: 12px;
    color: #666;
    margin-top: 10px;
    user-select: none;
}

.footer-note span {
    color: #0078d4;
    font-weight: 600;
}===== src/styles/Button.css =====
.keypad button {
    flex: 1 1 0;
    height: 52px;
    border-radius: 10px;
    border: 1px solid rgba(0, 0, 0, 0.05);
    background: #f9f9f9;
    font-size: 18px;
    cursor: pointer;
    transition: background 0.1s ease, transform 0.05s ease;
    font-weight: 500;
}

.keypad button:hover {
    background: #f1f1f1;
}

.keypad button:active {
    background: #e6e6e6;
    transform: scale(0.98);
}

.keypad .mem {
    font-weight: 600;
    background: #fcfcfc;
    border: 1px solid rgba(0, 0, 0, 0.06);
}

.keypad .func {
    background: #f3f4f6;
}

.keypad .op {
    background: #e7f1fb;
    font-weight: 700;
    color: #0a60c2;
}

.keypad .equals {
    background: #0078d4;
    color: white;
    font-weight: 700;
    border: none;
}===== src/styles/Display.css =====
.display-area {
    background: #f7f8fa;
    border-radius: 8px;
    padding: 16px;
    display: flex;
    flex-direction: column;
    align-items: flex-end;
    justify-content: center;
    min-height: 100px;
    position: relative;
    box-shadow: inset 0 -1px 0 rgba(0, 0, 0, 0.05);
}

/* K√Ω hi·ªáu M (b·ªô nh·ªõ) g√≥c tr√°i */
.memory-indicator {
    position: absolute;
    left: 12px;
    top: 10px;
    font-weight: 600;
    color: #444;
}

/* D√≤ng bi·ªÉu th·ª©c (ph√≠a tr√™n) */
.expression {
    font-size: 16px;
    color: #666;
    margin-bottom: 6px;
    height: 20px;
    text-align: right;
    width: 100%;
    overflow-x: auto;
    white-space: nowrap;
}

/* D√≤ng hi·ªÉn th·ªã ch√≠nh (k·∫øt qu·∫£ ho·∫∑c s·ªë ƒëang nh·∫≠p) */
.display {
    font-size: 38px;
    font-weight: 700;
    text-align: right;
    width: 100%;
    line-height: 1.2;
    word-wrap: break-word;
}===== src/components/Display.jsx =====
import React from "react";
import "../styles/Display.css";

/**
 * Component hi·ªÉn th·ªã m√†n h√¨nh m√°y t√≠nh:
 *  - D√≤ng tr√™n: ph√©p to√°n hi·ªán t·∫°i (expression)
 *  - D√≤ng d∆∞·ªõi: gi√° tr·ªã ƒëang nh·∫≠p ho·∫∑c k·∫øt qu·∫£ (display)
 *  - G√≥c tr√°i: k√Ω hi·ªáu b·ªô nh·ªõ (M)
 */
export default function Display({
    display,
    memoryFlag,
    formatNumberForDisplay,
    expression
}) {
    return (
        <div className="display-area">
            <div className="memory-indicator">{memoryFlag ? "M" : ""}</div>

            {/* D√≤ng tr√™n - ph√©p to√°n hi·ªán t·∫°i */}
            <div className="expression">{expression}</div>

            {/* D√≤ng d∆∞·ªõi - gi√° tr·ªã ƒëang nh·∫≠p / k·∫øt qu·∫£ */}
            <div className="display" role="textbox" aria-live="polite">
                {formatNumberForDisplay(display)}
            </div>
        </div>
    );
}
===== src/components/Button.jsx =====
import React from "react";
import "../styles/Button.css";

export default function Button({ label, className = "", onClick }) {
    return (
        <button className={className} onClick={onClick}>
            {label}
        </button>
    );
}
===== src/components/TopBar.jsx =====
import React from "react";
import "../styles/TopBar.css";

export default function TopBar() {
    return (
        <div className="topbar">
            <div className="left">
                <button className="hamburger" aria-label="Menu">‚â°</button>
                <div className="mode">Standard</div>
            </div>
            <div className="right">
                <button className="window-btn" aria-label="History">üïí</button>
            </div>
        </div>
    );
}
===== src/components/Keypad.jsx =====
import React from "react";
import "../styles/Keypad.css";
import Button from "./Button";

export default function Keypad({ actions }) {
    const {
        inputDigit, clearEntry, clearAll, backspace,
        toggleSign, applyUnary, handlePercent,
        handleOperator, handleEqual,
        memoryClear, memoryRecall, memoryStore, memoryAdd, memorySubtract
    } = actions;

    return (
        <div className="keypad">
            {/* <div className="row">
                <Button label="MC" className="mem" onClick={memoryClear} />
                <Button label="MR" className="mem" onClick={memoryRecall} />
                <Button label="M+" className="mem" onClick={memoryAdd} />
                <Button label="M‚àí" className="mem" onClick={memorySubtract} />
                <Button label="MS" className="mem" onClick={memoryStore} />
            </div> */}

            <div className="row">
                <Button label="%" className="func" onClick={handlePercent} />
                <Button label="CE" className="func" onClick={clearEntry} />
                <Button label="C" className="func" onClick={clearAll} />
                <Button label="‚Üê" className="func" onClick={backspace} />
            </div>

            <div className="row">
                <Button label="1/x" className="func" onClick={() => applyUnary("inverse")} />
                <Button label="x¬≤" className="func" onClick={() => applyUnary("square")} />
                <Button label="‚àöx" className="func" onClick={() => applyUnary("sqrt")} />
                <Button label="√∑" className="op" onClick={() => handleOperator("√∑")} />
            </div>

            <div className="row">
                <Button label="7" onClick={() => inputDigit("7")} />
                <Button label="8" onClick={() => inputDigit("8")} />
                <Button label="9" onClick={() => inputDigit("9")} />
                <Button label="√ó" className="op" onClick={() => handleOperator("√ó")} />
            </div>

            <div className="row">
                <Button label="4" onClick={() => inputDigit("4")} />
                <Button label="5" onClick={() => inputDigit("5")} />
                <Button label="6" onClick={() => inputDigit("6")} />
                <Button label="‚àí" className="op" onClick={() => handleOperator("‚àí")} />
            </div>

            <div className="row">
                <Button label="1" onClick={() => inputDigit("1")} />
                <Button label="2" onClick={() => inputDigit("2")} />
                <Button label="3" onClick={() => inputDigit("3")} />
                <Button label="+" className="op" onClick={() => handleOperator("+")} />
            </div>

            <div className="row">
                <Button label="+/-" className="func" onClick={toggleSign} />
                <Button label="0" onClick={() => inputDigit("0")} />
                <Button label="." onClick={() => inputDigit(".")} />
                <Button label="=" className="equals" onClick={handleEqual} />
            </div>
        </div>
    );
}
===== src/main.jsx =====
import React from "react";
import { createRoot } from "react-dom/client";
import App from "./App";
import "./index.css";

createRoot(document.getElementById("root")).render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);
===== src/App.jsx =====
import React, { useState, useRef } from "react";
import "./styles/App.css";
import TopBar from "./components/TopBar";
import Display from "./components/Display";
import Keypad from "./components/Keypad";
import {
    formatNumberForDisplay,
    evaluateExpression,
    applyUnary,
    applyPercent
} from "./logic/CalculatorEngine";

export default function App() {
    const [display, setDisplay] = useState("0");
    const [expression, setExpression] = useState("");
    const [memoryFlag, setMemoryFlag] = useState(false);
    const memoryRef = useRef(0);
    const [error, setError] = useState(null);
    const [lastOperator, setLastOperator] = useState(null);
    const [lastOperand, setLastOperand] = useState(null);
    const [resultLocked, setResultLocked] = useState(false);

    /* ======== INPUT ======== */
    const inputDigit = (d) => {
        if (error) return;
        if (resultLocked) {
            setDisplay(d === "." ? "0." : d);
            setExpression("");
            setResultLocked(false);
            return;
        }
        if (display === "0" && d !== ".") setDisplay(d);
        else if (d === "." && display.includes(".")) return;
        else setDisplay((prev) => prev + d);
    };

    /* ======== CLEAR ======== */
    const clearAll = () => {
        setDisplay("0");
        setExpression("");
        setError(null);
        setResultLocked(false);
        setLastOperator(null);
        setLastOperand(null);
    };

    const clearEntry = () => {
        if (error) return clearAll();
        setDisplay("0");
    };

    /* ======== BACKSPACE ======== */
    const backspace = () => {
        if (error) return clearAll();
        setResultLocked(false); // <-- th√™m d√≤ng n√†y ƒë·ªÉ cho ph√©p x√≥a sau khi nh·∫•n =
        setDisplay((prev) =>
            prev.length <= 1 || (prev.length === 2 && prev.startsWith("-")) ? "0" : prev.slice(0, -1)
        );
    };


    /* ======== TO√ÅN T·ª¨ 1 NG√îI ======== */
    const handleUnary = (op) => {
        if (error) return;
        const result = applyUnary(op, display);
        if (["Error", "Cannot divide by zero", "Overflow"].includes(result)) {
            setError(result);
            setDisplay(result);
            return;
        }
        setDisplay(String(result));
    };

    /* ======== PERCENT ======== */
    const handlePercent = () => {
        if (error) return;
        const result = applyPercent(display);
        setDisplay(String(result));
    };

    /* ======== TO√ÅN T·ª¨ 2 NG√îI ======== */
    const handleOperator = (op) => {
        if (error) return;
        if (resultLocked) {
            setExpression(display + " " + op);
            setResultLocked(false);
        } else {
            setExpression((prev) => (prev ? prev + " " + display + " " + op : display + " " + op));
        }
        setDisplay("0");
        setLastOperator(op);
    };

    /* ======== D·∫§U = ======== */
    const handleEqual = () => {
        if (error) return;
        let exprToEval = expression;
        if (!resultLocked) {
            exprToEval = expression ? expression + " " + display : display;
            setExpression(exprToEval);
        } else if (lastOperator && lastOperand) {
            exprToEval = display + " " + lastOperator + " " + lastOperand;
        }
        const result = evaluateExpression(exprToEval);
        if (["Cannot divide by zero", "Error"].includes(result)) {
            setError(result);
            setDisplay(result);
        } else {
            setDisplay(String(result));
            setResultLocked(true);
            setLastOperand(display);
        }
    };

    /* ======== B·ªò NH·ªö ======== */
    const memoryClear = () => { memoryRef.current = 0; setMemoryFlag(false); };
    const memoryRecall = () => { setDisplay(String(memoryRef.current)); setResultLocked(false); };
    const memoryStore = () => { memoryRef.current = Number(display); setMemoryFlag(true); setResultLocked(false); };
    const memoryAdd = () => { memoryRef.current += Number(display); setMemoryFlag(true); };
    const memorySubtract = () => { memoryRef.current -= Number(display); setMemoryFlag(true); };

    /* ======== ACTIONS ======== */
    const actions = {
        inputDigit, clearAll, clearEntry, backspace,
        toggleSign: () => setDisplay(display.startsWith("-") ? display.slice(1) : "-" + display),
        handleUnary, handlePercent,
        handleOperator, handleEqual,
        memoryClear, memoryRecall, memoryStore, memoryAdd, memorySubtract
    };

    return (
        <div className="calculator-root">
            <div className="calculator">
                <TopBar />
                <Display
                    display={display}
                    memoryFlag={memoryFlag}
                    formatNumberForDisplay={formatNumberForDisplay}
                    expression={expression}
                />
                <Keypad actions={actions} />
                <div className="footer-note">
                    Calculator_IA ‚Äî <span>Scientific</span> Mode
                </div>
            </div>
        </div>
    );
}
